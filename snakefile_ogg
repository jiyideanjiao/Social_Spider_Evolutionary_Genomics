
##MODIFY
GENOMES = {"{species_name}":"{specie_name}.fa"} 

##MODIFY
SPECIES = ["{species_name}"]


ODB_FASTA = "aa_seq_euk.fasta" ##Downloaded from OrthoDB8

THREADS = 40

#Closest related species within the orthoDB database to our studied species.
#Note that 'SINV' and 'GB' are the orthoDB prefixes for the protein names for each species

##MODIFY
REF_PREFIX = {"{species_anme}":"CUFF"}

##MODIFY
REF_SP = ["CUFF"]

##MODIFY
OGGLEVS = ["ara"]

##MODIFY
ODB = {"ara":"ODB8_EukOGs_genes_Arachnida-6854.txt"}

##MODIFY
DIR = "{path}"

#Only works for one db currently. This takes the OGG file and makes a list of OGGs
OGG = [x.split()[1] for x in open("ODB8_EukOGs_genes_Arachnida-6854.txt").readlines()][1:20]

rule all:
	input: expand("OGGmap_{species}_{db}",species=SPECIES,db=OGGLEVS)

#Make database containing all protein sequences for the given OGG level (properly labeled with ortholog name)
rule makeProtDB:
	input: ODB_FASTA,ann=lambda wildcards: ODB[wildcards.db]
	output: "ref/{db}/{db}.fa"
	shell: """sed 's/>.*\t/>/' {input[0]} > aa_trimmed.fasta; \
		awk '{{print $4}}' {input[ann]} | sed '1d' > keepTr.txt; \
		pyfasta extract --header --fasta aa_trimmed.fasta --file keepTr.txt > {wildcards.db}Prot.fa; \
		python2.7 FastaHeaderOGG.py -i {wildcards.db}Prot.fa -s {input[ann]} -o ref/{wildcards.db}/{wildcards.db}.fa; \
		rm aa_trimmed.fasta {wildcards.db}Prot.fa"""

##MODIFY
rule createOGGfa:
	input: dbfa="ref/ara/ara.fa",ann=ODB["ara"]
	output: fast=expand("{ogg}OGG.fa",ogg=OGG)
	threads: 40
	shell: """for OGG in $(awk '{{print $2}}' {input[ann]} | uniq | sed '1d' ); \
		do grep $OGG {input[dbfa]} | sed 's/>//' > $OGG"temp.txt"; \
		pyfasta extract --header --fasta {input[dbfa]} --file $OGG"temp.txt" > $OGG"OGG.fa"; \
		done; rm $OGG"temp.txt"; \
		"""

#Build hidden markov models of orthologs
#Note that the python script also removes the input files as it goes

##MODIFY
rule BuildHMM:
	input: "{ogg}OGG.fa"
	output: "ref/ara/hmm_dir/{ogg}.hmm"
	threads: 40
	shell: "python2.7 OGGalign.py -s {input} -o {output}"

#Make blast DB of Solenopsis invicta, the reference species for M. pharaonis
#Do this for the hymenoptera database because that contains the most sequences
##MODIFY
rule makeDB:
	input: "ref/ara/ara.fa"
	output: "blast_dir/{refsp}/{refsp}.fa","blast_dir/{refsp}/{refsp}.psq"
	shell: """grep ">.*{wildcards.refsp}" {input} | sed 's/>//' > keep{wildcards.refsp}; \
		pyfasta extract --header --fasta {input} --file keep{wildcards.refsp} | sed 's/.*{wildcards.refsp}|/>/' > {wildcards.refsp}.fa; \
		makeblastdb -in {wildcards.refsp}.fa -dbtype prot -out blast_dir/{wildcards.refsp}/{wildcards.refsp}; \
		mv {wildcards.refsp}.fa* blast_dir/{wildcards.refsp}/"""

#Run Hamstr to align genes to orthologs
rule Hamstr:
	input: 
		"ref/{db}/{db}.fa",
		expand("blast_dir/{refsp}/{refsp}.psq",refsp=REF_SP),
		genome=lambda wildcards: GENOMES[wildcards.species]
	output: 
		"hamstrsearch_{species}_{db}.out"
	params: 
		rg=lambda wildcards: REF_PREFIX[wildcards.species]
	shell: "hamstr -sequence_file={input[genome]} -hmmset={wildcards.db} -hmmpath={DIR}/ref -refspec={params.rg} -taxon={wildcards.species} -blastpath={DIR}/blast_dir -central -append -cpu={THREADS}"

#Parse Hamstr output to get transcript -> OGG definitions
rule makeOGGmap:
	input: "hamstrsearch_{species}_{db}.out"
	output: "OGGmap_{species}_{db}"
	shell: """cat {input} | sed 's/|/\t/g' | awk '{{print $1"\t"$4}}' > {output}"""
